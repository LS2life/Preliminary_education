# 기존 application.properties 사용시 하기의 내용처럼 사용.

# spring.jpa.hibernate.ddl-auto:create 옵셥은 로컬에서만 사용할것. create옵션은 해당테이블이 있으면 DROP하고 새로만들어 버린다.
# ddl-auto 옵션 종류
# none: 엔티티가 변경되더라도 데이터베이스를 변경하지 않는다.
# update: 변경분만 반영(운영DB에서는 사용하면 안됨)
# validate: 변경사항이 있는지 검사만. 엔티티와 테이블이 정상 매핑되었는지만 확인
# create: 스프링부트 서버가 시작될때 모두 drop하고 다시생성.
# create-drop: create와 같으나 종료시점에도 테이블 DROP

# 운영장비에서는 절대 create, treate-drop, update 사용금지.
# 개발초기단계에서는 보통 create 또는 update
# 테스트서버에서는 update, validate
# 스테이징, 운영서버라면 validate 또는 none

# JPA
spring.jpa.database=mysql
spring.jpa.hibernate.ddl-auto=validate
# 하이버네이트가 실행한 SQL문을 콘솔로 출력
spring.jpa.properties.hibernate.show_sql=true
# 콘솔출력된 SQL문을 가독성있는 폼으로 출력
spring.jpa.properties.hibernate.format_sql=true
# 디버깅 정보 출력
spring.jpa.properties.hibernate.use_sql_comments=true


# DATABASE
# 데이터베이스 접속경로
spring.datasource.url=jdbc:mysql://150.230.255.58:3306/dbplayground
# spring.datasource.url=jdbc:mysql://localhost:3306/dbplayground
# DB 사용자명
spring.datasource.username=dbplaygroundmaster
# DB 패스워드
spring.datasource.password=dbpgmaster
# 데이터베이스 접속시 사용하는 드라이버
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# logging
# 로그파일 유지기간
logging.logback.rollingpolicy.max-history=30
# 로그파일 한 개의 최대 크기
logging.logback.rollingpolicy.max-file-size=100MB
# 로그파일 이름 
logging.file.name= logs/jumpspring.log
# 로그파일의 사이즈가 설정한 용량을 초과하거나 날짜가 변경될 경우의 파일명
logging.logback.rollingpolicy.file-name-pattern=${LOG_FILE},%d{yyyy-MM-dd}-%i.log
# 로그 출력시 출력하는 날짜와 시간에 대한 포맷과 타임존 설정
logging.pattern.dateformat=yyyy-MM-dd HH:mm:ss.SSS,Asia/Seoul
# 로깅 레벨. info가 디폴트값
logging.level.root=info
